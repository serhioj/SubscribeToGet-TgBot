from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message, FSInputFile, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
import asyncio

import sqlite3
import csv

import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã
load_dotenv() 

TOKEN = os.getenv("TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")
ADMIN_PASSWORD = os.getenv("ADMIN_PASSWORD")

# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite –∏ —Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
conn = sqlite3.connect('users_db/user_feedback.db')
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS feedback (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    username TEXT,
                    start_time TEXT,
                    feedback TEXT
                )''')
conn.commit()

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –æ—Ç–∑—ã–≤–∞
pending_feedback_users = set()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã–∑–æ–≤–∞ –∫–æ–º–∞–Ω–¥—ã
last_start_time = {}

# –ü–µ—Ä–∏–æ–¥ –æ–∂–∏–¥–∞–Ω–∏—è –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –≤—ã–∑–æ–≤–æ–º –∫–æ–º–∞–Ω–¥—ã (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
RATE_LIMIT_SECONDS = 60

@dp.message(Command("start"))
async def send_welcome(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username
    current_time = datetime.now()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–∞—Å—Ç–æ—Ç—É –≤—ã–∑–æ–≤–∞ –∫–æ–º–∞–Ω–¥—ã
    if user_id in last_start_time:
        last_call_time = last_start_time[user_id]
        time_since_last_call = current_time - last_call_time
        if time_since_last_call < timedelta(seconds=RATE_LIMIT_SECONDS):
            return

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã–∑–æ–≤–∞ –∫–æ–º–∞–Ω–¥—ã
    last_start_time[user_id] = current_time

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("SELECT user_id FROM feedback WHERE user_id = ?", (user_id,))
    user_exists = cursor.fetchone()
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
    if not user_exists:
        start_time = current_time.strftime('%Y-%m-%d %H:%M:%S')
        cursor.execute("INSERT INTO feedback (user_id, username, start_time) VALUES (?, ?, ?)", (user_id, username, start_time))
        conn.commit()
    else:
        ...

    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è(-–∞—Å—å)", callback_data="check_subscription")
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–ª–µ–∫—Å–∞–Ω–¥—Ä, –∏ —è –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞—à–µ–º—É –±–∏–∑–Ω–µ—Å—É üî•\n"
        "\n–Ø –≥–æ—Ç–æ–≤ –±–µ—Å–ø–ª–∞—Ç–Ω–æ –æ—Ç–¥–∞—Ç—å –≤–∞–º –≥–∞–π–¥, <b>–∫–∞–∫ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç—å –µ—â—ë –±–æ–ª—å—à–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –±–µ–∑ —Ä–µ–∫–ª–∞–º—ã –≤ 2025 –≥–æ–¥—É.</b> "
        "–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ <a href='https://t.me/defdesign'>–º–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª</a> "
        "–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è(-–∞—Å—å)¬ª. <b>–¢–∞–º –ø—Ä–∞–≤–¥–∞ –º–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ</b> üòâ",
        parse_mode="HTML", reply_markup=keyboard.as_markup()
     )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@dp.message(lambda message: message.text == ADMIN_PASSWORD)
async def handle_admin_password(message: Message):
    if message.text == ADMIN_PASSWORD:
        print('–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–≤–ø–∞–ª–æ')
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è CSV-—Ñ–∞–π–ª–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("SELECT user_id, username, start_time, feedback FROM feedback")
        rows = cursor.fetchall()
        
        # –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ CSV-—Ñ–∞–π–ª
        csv_file_path = "user_data.csv"
        with open(csv_file_path, mode="w", newline="", encoding="utf-8") as file:
            writer = csv.writer(file)
            writer.writerow(["user_id", "username", "start_time", "feedback"])
            writer.writerows(rows)
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        await message.answer_document(FSInputFile(csv_file_path), caption="–í–æ—Ç —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    else:
        ...

@dp.callback_query(lambda c: c.data == "check_subscription")
async def check_subscription(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    member = await bot.get_chat_member(CHANNEL_ID, user_id)
    if member.status != 'left':
        await callback_query.message.edit_reply_markup(reply_markup=None)

        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="–° –∫–æ–º–ø—å—é—Ç–µ—Ä–∞", callback_data="from_pc")
        keyboard.button(text="–° —Ç–µ–ª–µ—Ñ–æ–Ω–∞", callback_data="from_mobile")
        await callback_query.message.answer(
            "–°—É–ø–µ—Ä, –≤–∏–∂—É –ø–æ–¥–ø–∏—Å–∫—É üòé –ó–Ω–∞–µ—Ç–µ, —Å –≤–∞–º–∏ –ø—Ä–∏—è—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å, –ø–æ—ç—Ç–æ–º—É –∑–∞–±–∏—Ä–∞–π—Ç–µ —Ñ–∞–π–ª üëá\n"
            "\n–ó–¥–µ—Å—å –¥–≤–∞ PDF-—Ñ–∞–π–ª–∞, –æ—Ç–ª–∏—á–∞—é—â–∏—Ö—Å—è —Ñ–æ—Ä–º–∞—Ç–æ–º. –í—ã–±–µ—Ä–∏—Ç–µ, —Å –∫–∞–∫–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ —á–∏—Ç–∞—Ç—å",
            parse_mode="HTML", reply_markup=keyboard.as_markup())
    else:
        await callback_query.message.delete()
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è(-–∞—Å—å)", callback_data="retry_check_subscription")
        await callback_query.message.answer(
            "\n–Ø –≥–æ—Ç–æ–≤ –±–µ—Å–ø–ª–∞—Ç–Ω–æ –æ—Ç–¥–∞—Ç—å –≤–∞–º –≥–∞–π–¥, <b>–∫–∞–∫ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç—å –µ—â—ë –±–æ–ª—å—à–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –±–µ–∑ —Ä–µ–∫–ª–∞–º—ã –≤ 2025 –≥–æ–¥—É.</b> "
            "–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ <a href='https://t.me/defdesign'>–º–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª</a> "
            "–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è(-–∞—Å—å)¬ª. <b>–¢–∞–º –ø—Ä–∞–≤–¥–∞ –º–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ</b> üòâ",
            parse_mode="HTML", reply_markup=keyboard.as_markup()
        )

@dp.callback_query(lambda c: c.data == "retry_check_subscription")
async def retry_check_subscription(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    member = await bot.get_chat_member(CHANNEL_ID, user_id)
    if member.status != 'left':
        await callback_query.message.edit_reply_markup(reply_markup=None)

        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="–° –∫–æ–º–ø—å—é—Ç–µ—Ä–∞", callback_data="from_pc")
        keyboard.button(text="–° —Ç–µ–ª–µ—Ñ–æ–Ω–∞", callback_data="from_mobile")
        await callback_query.message.answer(
            "–°—É–ø–µ—Ä, –≤–∏–∂—É –ø–æ–¥–ø–∏—Å–∫—É üòé –ó–Ω–∞–µ—Ç–µ, —Å –≤–∞–º–∏ –ø—Ä–∏—è—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å, –ø–æ—ç—Ç–æ–º—É –∑–∞–±–∏—Ä–∞–π—Ç–µ —Ñ–∞–π–ª üëá\n"
            "\n–ó–¥–µ—Å—å –¥–≤–∞ PDF-—Ñ–∞–π–ª–∞, –æ—Ç–ª–∏—á–∞—é—â–∏—Ö—Å—è —Ñ–æ—Ä–º–∞—Ç–æ–º. –í—ã–±–µ—Ä–∏—Ç–µ, —Å –∫–∞–∫–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ —á–∏—Ç–∞—Ç—å",
            reply_markup=keyboard.as_markup())
    else:
        ...

@dp.callback_query(lambda c: c.data in ["from_pc", "from_mobile"])
async def send_file(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—è feedback –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("SELECT feedback FROM feedback WHERE user_id = ?", (user_id,))
    feedback = cursor.fetchone()
    
    if callback_query.data == "from_pc":
        await callback_query.message.edit_reply_markup(reply_markup=None)
        document = FSInputFile("files_to_get/guide_for_pc.pdf")
        await callback_query.message.answer_document(document)
    elif callback_query.data == "from_mobile":
        await callback_query.message.edit_reply_markup(reply_markup=None)
        document = FSInputFile("files_to_get/guide_for_mobile.pdf")
        await callback_query.message.answer_document(document)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ —Å—Ç–∞—Ç—å—é
        asyncio.create_task(send_delayed_article(user_id))

    # –ï—Å–ª–∏ –ø–æ–ª–µ feedback –ø—É—Å—Ç–æ–µ (None), –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if feedback is None or feedback[0] is None:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        asyncio.create_task(send_delayed_message(user_id))

async def send_delayed_message(user_id: int):
    await asyncio.sleep(60 * 60)
    try:
        pending_feedback_users.add(user_id)
        
        await bot.send_message(
            user_id,
            "–ü—Ä–∏–≤–µ—Ç,üëã –∫–∞–∫ –≤–∞–º –≥–∞–π–¥? –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Å–≤–æ—ë–º –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–∏, –º–Ω–µ –≤–∞–∂–Ω–æ –∑–Ω–∞—Ç—å, —á—Ç–æ —è –¥–µ–ª—é—Å—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –ø—Ä–æ–¥—É–∫—Ç–æ–º ü§ù"
        )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def send_delayed_article(user_id: int):
    await asyncio.sleep(60 * 90)
    try:
        pending_feedback_users.add(user_id)
        
        await bot.send_message(
            user_id,
            "üìâ –ß–∞—Å—Ç–æ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª–∏ —Ç–µ—Ä—è—é—Ç —Å–≤–æ–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤, –¥–æ–±–∞–≤–ª—è—è –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω —Å–ª–æ–≥–∞–Ω –≤–º–µ—Å—Ç–æ –£–¢–ü. "
            "–í –∏—Ç–æ–≥–µ —ç—Ç–æ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ —Ç–æ–º—É, —á—Ç–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã –Ω–µ –ø–æ–Ω–∏–º–∞—é—Ç —Å–≤–æ—é –≤—ã–≥–æ–¥—É –∏ –ø–æ–∫–∏–¥–∞—é—Ç —Ä–µ—Å—É—Ä—Å. "
            "–ß—Ç–æ–±—ã —ç—Ç–æ–≥–æ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏–ª–æ, –¥–æ–Ω–æ—Å–∏—Ç–µ –ø–æ–ª—å–∑—É –≤–∞—à–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å—Ä–∞–∑—É. –ù–∞–ø—Ä–∏–º–µ—Ä, –≤–º–µ—Å—Ç–æ ¬´–ú–∞–º–∞, –ø–∞–ø–∞, —è ‚Äì —Ç–∞–Ω—Ü–µ–≤–∞–ª—å–Ω–∞—è —Å–µ–º—å—è!¬ª "
            "–Ω–∞–ø–∏—à–∏—Ç–µ ¬´–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è –ø–æ —Ç–∞–Ω—Ü–∞–º –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö –≤–∑—Ä–æ—Å–ª—ã—Ö –∏ –¥–µ—Ç–µ–π –æ—Ç 6 –ª–µ—Ç, –±–µ–∑ –ª–∏—à–Ω–∏—Ö –≥–ª–∞–∑¬ª.\n"
            "\nü´† –¢–∞–∫–∏—Ö –Ω–µ–∑–∞–º–µ—Ç–Ω—ã—Ö –æ—à–∏–±–æ–∫ —Ü–µ–ª–æ–µ –º–æ—Ä–µ. –Ø —Å–æ–±—Ä–∞–ª 6 —Å–∞–º—ã—Ö —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫ –≤ –æ–¥–Ω—É "
            "<a href='https://tenchat.ru/media/2555890-ubiytsy-konversii-6-antagonistov-prodayuschego-sayta?clckid=8780e6b5'>–∫–æ—Ä–æ—Ç–∫—É—é —Å—Ç–∞—Ç—å—é, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –¥–æ–±–∏—Ç—å—Å—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –∫–æ–Ω–≤–µ—Ä—Å–∏–∏.</a>"
            " –ï—Å–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ ‚Äî –±—É–¥—É —Ä–∞–¥ –≤–∞—à–µ–º—É –≤–Ω–∏–º–∞–Ω–∏—é."
        )   
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ç—å–∏: {e}")

@dp.message()
async def save_feedback(message: Message):
    user_id = message.from_user.id
    if user_id in pending_feedback_users:
        username = message.from_user.username
        feedback = message.text
        cursor.execute("UPDATE feedback SET feedback = ? WHERE user_id = ?", (feedback, user_id))
        conn.commit()
        
        pending_feedback_users.remove(user_id)
        
        await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!")



async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
